# app/orchestrator.py
# -*- coding: utf-8 -*-
from typing import Dict, Any, List, Tuple, Optional
import os

# B·∫≠t debug (in k√®m m·ªôt √≠t metadata khi l·ªói) b·∫±ng c√°ch ƒë·∫∑t bi·∫øn m√¥i tr∆∞·ªùng: DEBUG_ORCH=1
_DEBUG_ORCH = os.getenv("DEBUG_ORCH", "0") == "1"

# ==== Heuristics cho close-reading & poem-only (NEW) =========================
_TRICH_DAN_TRIGGER = ["tr√≠ch", "c√¢u th∆°", "nguy√™n vƒÉn", "d·∫´n", "l·ª•c b√°t", "nh·ªãp", "v·∫ßn", "ƒëi·ªáp", "ƒë·ªëi"]
_CLOSE_READING_TRIGGER = ["tr·ªØ t√¨nh ngo·∫°i ƒë·ªÅ", "ƒëi·ªÉm nh√¨n", "·∫©n d·ª•", "nh·ªãp ƒëi·ªáu", "mapping", "b·∫£n ƒë·ªì √Ω ni·ªám"]

def _needs_poem_only(q: str) -> bool:
    ql = (q or "").lower()
    return any(t in ql for t in _TRICH_DAN_TRIGGER)

def _is_close_reading(q: str) -> bool:
    ql = (q or "").lower()
    return any(t in ql for t in _CLOSE_READING_TRIGGER)

def _make_cache_key(q: str, *, long_answer: bool, intent: str) -> str:
    return f"{_norm_key(q)}|la={int(bool(long_answer))}|intent={intent}"

# ==== Utilities ===============================================================

def _norm_key(q: str) -> str:
    return (q or "").strip().lower()

def _history_to_text(history: Optional[List[Tuple[str, str]]], max_turns: int = 6) -> str:
    if not history:
        return ""
    h = history[-max_turns:]
    lines = []
    for role, txt in h:
        role = "USER" if role == "user" else "ASSISTANT"
        lines.append(f"[{role}]\n{txt}")
    return "\n\n".join(lines)

def _generation_failure_response(
    intent: str,
    reason: str,
    *,
    sources: Optional[List[str]] = None,
) -> Dict[str, Any]:
    detail = (reason or "").strip()
    message = (
        "ü§ñ Xin l·ªói, h·ªá th·ªëng ch∆∞a th·ªÉ g·ªçi m√¥ h√¨nh Gemini ƒë·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi. "
        "Vui l√≤ng ki·ªÉm tra GOOGLE_API_KEY v√† k·∫øt n·ªëi m·∫°ng."
    )
    if detail:
        message += f"\n\nChi ti·∫øt k·ªπ thu·∫≠t: {detail}"
    return {"intent": intent, "answer": message, "sources": sources or [], "error": detail}

def _safe_generate(
    intent: str,
    prompt: str,
    *,
    sources: Optional[List[str]] = None,
    **gen_kwargs: Any,
) -> Tuple[Optional[str], Optional[Dict[str, Any]]]:
    """
    - √âp max_tokens -> int (tr√°nh len(int))
    - Kh√¥ng coi prompt l√† string khi debug (tr√°nh len() tr√™n int)
    - N·∫øu model tr·∫£ r·ªóng -> b√°o l·ªói
    - B·∫Øt m·ªçi exception -> tr·∫£ payload l·ªói th·ªëng nh·∫•t
    """
    # √©p ki·ªÉu max_tokens
    if "max_tokens" in gen_kwargs and gen_kwargs["max_tokens"] is not None:
        try:
            gen_kwargs["max_tokens"] = int(gen_kwargs["max_tokens"])
        except Exception:
            del gen_kwargs["max_tokens"]

    def _dbg_meta(p: Any) -> Dict[str, Any]:
        # an to√†n v·ªõi m·ªçi ki·ªÉu d·ªØ li·ªáu
        try:
            plen = len(p)  # ch·ªâ OK n·∫øu p c√≥ __len__
        except Exception:
            plen = 0
        try:
            head = (p if isinstance(p, str) else str(p))[:400]
        except Exception:
            head = ""
        return {
            "model": gen_kwargs.get("model"),
            "max_tokens": gen_kwargs.get("max_tokens"),
            "prompt_type": type(p).__name__,
            "prompt_chars": plen,
            "prompt_head": head,
        }

    try:
        from .generation import generate_answer_gemini
        # ƒë·∫£m b·∫£o prompt l√† string tr∆∞·ªõc khi g·ªçi
        if not isinstance(prompt, str):
            prompt = str(prompt)

        out: str = generate_answer_gemini(prompt, **gen_kwargs)
        if not (out and out.strip()):
            failure = _generation_failure_response(intent, "Model tr·∫£ v·ªÅ n·ªôi dung r·ªóng.", sources=sources)
            if _DEBUG_ORCH:
                failure["debug"] = _dbg_meta(prompt)
            return None, failure
        return out, None

    except Exception as exc:
        failure = _generation_failure_response(intent, str(exc), sources=sources)
        if _DEBUG_ORCH:
            failure["debug"] = _dbg_meta(prompt)
        return None, failure

def answer_with_router(
    query: str,
    k: int = 5,
    gemini_model: str = "gemini-2.0-flash",
    history: Optional[List[Tuple[str, str]]] = None,
    long_answer: bool = False,
    max_tokens: Optional[int] = None,
) -> Dict[str, Any]:
    """
    H√†m ƒëi·ªÅu ph·ªëi ch√≠nh ‚Äî ƒë∆∞·ª£c UI g·ªçi.
    M·ªçi import n·ªôi b·ªô ƒë∆∞·ª£c d·ªùi v√†o trong h√†m (lazy import) ƒë·ªÉ tr√°nh KeyError khi reload.
    """
    # ‚¨áÔ∏è Lazy import c√°c submodule ph·ª• thu·ªôc
    from .router import route_intent, parse_poem_request
    from .rag_pipeline import answer_question
    from .faq import lookup_faq
    from .cache import get_cached, set_cached
    from .poem_tools import poem_ready, get_opening, get_range, get_single, compare_lines
    from .prompt_engineering import (
        DEFAULT_LONG_TOKEN_BUDGET,
        DEFAULT_SHORT_TOKEN_BUDGET,
        build_generic_prompt,
        build_poem_disambiguation_prompt,
        build_smalltalk_prompt,
        build_poem_compare_prompt,
    )
    from .verifier import verify_poem_quotes

    short_history = _history_to_text(history, max_turns=4)
    full_history = _history_to_text(history, max_turns=8)

    if max_tokens is None:
        max_tokens = DEFAULT_LONG_TOKEN_BUDGET if long_answer else DEFAULT_SHORT_TOKEN_BUDGET

    # 1) FAQ (kh√¥ng in ngu·ªìn) ‚Äî v·∫´n ∆∞u ti√™n tr∆∞·ªõc
    hit = lookup_faq(query)
    if hit:
        ans = hit["answer"]
        # Cache theo intent c·ª• th·ªÉ
        intent = "faq"
        qkey = _make_cache_key(query, long_answer=long_answer, intent=intent)  # NEW
        set_cached(qkey, ans)
        return {"intent": intent, "answer": ans, "sources": []}

    # 2) Route intent
    intent = route_intent(query)
    qkey = _make_cache_key(query, long_answer=long_answer, intent=intent)  # NEW

    # 0) Cache sau khi bi·∫øt intent (NEW)
    from .cache import get_cached, set_cached  # re-import safe
    cached = get_cached(qkey)
    if cached:
        return {"intent": "cache", "answer": cached, "sources": []}

    # ---- Small talk
    if intent == "chitchat":
        prompt = build_smalltalk_prompt(query, history_text=short_history)
        ans, failure = _safe_generate(
            intent, prompt, model=gemini_model, long_answer=long_answer, max_tokens=max_tokens
        )
        if failure:
            return failure
        set_cached(qkey, ans or "")
        return {"intent": intent, "answer": ans or "", "sources": []}

    # ---- Generic factual
    if intent == "generic":
        prompt = build_generic_prompt(
            query,
            history_text=full_history,
            depth="expanded" if long_answer else "balanced",
        )
        ans, failure = _safe_generate(
            intent, prompt, model=gemini_model, long_answer=long_answer, max_tokens=max_tokens
        )
        if failure:
            return failure
        set_cached(qkey, ans or "")
        return {"intent": intent, "answer": ans or "", "sources": []}

    # ---- Poem mode
    if intent == "poem":
        if not poem_ready():
            msg = "Kho th∆° ch∆∞a s·∫µn s√†ng (c·∫ßn data/interim/poem/poem.txt, m·ªói c√¢u 1 d√≤ng)."
            set_cached(qkey, msg)
            return {"intent": "poem", "answer": msg, "sources": []}

        spec = parse_poem_request(query)
        if spec:
            kind = spec[0]
            if kind == "opening":
                n = max(1, min(int(spec[1]), 1500))
                lines = get_opening(n)
                txt = "\n".join(f"{i + 1:>4}: {ln}" for i, ln in enumerate(lines))
                ans = f"**{n} c√¢u ƒë·∫ßu Truy·ªán Ki·ªÅu:**\n\n{txt}"
                set_cached(qkey, ans)
                return {"intent": "poem", "answer": ans, "sources": []}

            if kind == "range":
                a, b = int(spec[1]), int(spec[2])
                if a > b:
                    a, b = b, a
                lines = get_range(a, b)
                txt = "\n".join(f"{a + i:>4}: {ln}" for i, ln in enumerate(lines))
                ans = f"**C√°c c√¢u {a}‚Äì{b} trong Truy·ªán Ki·ªÅu:**\n\n{txt}"
                set_cached(qkey, ans)
                return {"intent": "poem", "answer": ans, "sources": []}

            if kind == "single":
                n = int(spec[1])
                ln = get_single(n)
                if ln:
                    ans = f"**C√¢u {n} trong Truy·ªán Ki·ªÅu:**\n\n{n:>4}: {ln}"
                else:
                    ans = f"Ch∆∞a tra ƒë∆∞·ª£c c√¢u {n} (v∆∞·ª£t ngo√†i s·ªë d√≤ng hi·ªán c√≥)."
                set_cached(qkey, ans)
                return {"intent": "poem", "answer": ans, "sources": []}

            if kind == "compare":
                a, b = int(spec[1]), int(spec[2])
                line_a, line_b = compare_lines(a, b)
                if not line_a or not line_b:
                    ans = "Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ so s√°nh hai c√¢u ƒë∆∞·ª£c y√™u c·∫ßu."
                    set_cached(qkey, ans)
                    return {"intent": "poem", "answer": ans, "sources": []}
                prompt = build_poem_compare_prompt(
                    query,
                    line_a=line_a,
                    line_b=line_b,
                    history_text=short_history,
                )
                ans, failure = _safe_generate(
                    "poem",
                    prompt,
                    model=gemini_model,
                    long_answer=long_answer,
                    max_tokens=max_tokens,
                    sources=[f"c√¢u {line_a.number}", f"c√¢u {line_b.number}"],
                )
                if failure:
                    return failure
                verification = verify_poem_quotes(ans or "")
                set_cached(qkey, ans or "")
                sources = [f"c√¢u {line_a.number}", f"c√¢u {line_b.number}"]
                return {
                    "intent": "poem",
                    "answer": ans or "",
                    "sources": sources,
                    "verification": verification,
                }

        # Kh√¥ng parse ƒë∆∞·ª£c ‚Äî nh·ªù model h·ªèi l·∫°i ng·∫Øn
        prompt = build_poem_disambiguation_prompt(query, history_text=short_history)
        ans, failure = _safe_generate(
            "poem", prompt, model=gemini_model, long_answer=long_answer, max_tokens=max_tokens
        )
        if failure:
            return failure
        verification = verify_poem_quotes(ans or "")
        set_cached(qkey, ans or "")
        return {"intent": "poem", "answer": ans or "", "sources": [], "verification": verification}

    # ---- 3) Domain ‚Üí RAG
    poem_only = _needs_poem_only(query)       # NEW
    close_reading = _is_close_reading(query)  # NEW

    pack = answer_question(
        query,
        k=k,
        synthesize="single",
        gen_model=gemini_model,
        force_quote=True,
        long_answer=long_answer,
        history_text=full_history,
        max_tokens=max_tokens,
        # ===== Hints cho RAG pipeline (NEW) =====
        prefer_poem_source=poem_only,                 # ∆∞u ti√™n chunk poem/poem.txt
        top_evidence=6,                               # ch·ªçn t·ªëi ƒëa 6 ch·ª©ng c·ª©
        essay_mode=("hsg" if close_reading else None) # g·ª£i √Ω composer sinh skeleton HSG
    )

    if pack.get("generation_error"):
        return _generation_failure_response("domain", str(pack["generation_error"]))

    ans = pack.get("answer")
    sources = pack.get("sources", [])     # NEW: nh·∫≠n list ngu·ªìn t·ª´ pipeline
    evidence = pack.get("evidence", [])   # NEW: n·∫øu pipeline tr·∫£ v·ªÅ
    verification = verify_poem_quotes(ans or "") if ans else None

    # N·∫øu ph√°t hi·ªán qu√° nhi·ªÅu tr√≠ch d·∫´n kh√¥ng chu·∫©n ‚Üí h·∫° t√¥ng ho·∫∑c g·ª£i √Ω xem c√¢u g·ªëc (NEW)
    bad_count = 0
    if isinstance(verification, dict):
        bad_count = len(verification.get("invalid_quotes", [])) + len(verification.get("non_exact", []))

    if ans:
        if poem_only and bad_count >= 2:
            ans += (
                "\n\n**L∆∞u √Ω:** Ph√°t hi·ªán v√†i tr√≠ch d·∫´n ch∆∞a kh·ªõp nguy√™n vƒÉn. "
                "B·∫°n c√≥ th·ªÉ y√™u c·∫ßu: `tr√≠ch c√¢u n‚Äìm` ho·∫∑c `ki·ªÉm tra c√°c c√¢u ...` ƒë·ªÉ xem b·∫£n g·ªëc."
            )
        set_cached(qkey, ans or "")
        return {
            "intent": "domain",
            "answer": ans or "",
            "sources": sources,
            "verification": verification,
            "evidence": evidence,
        }

    # 4) Fallback ‚Äî d√πng prompt ƒë√£ build
    p = pack.get("prompt", "")
    if not isinstance(p, str):
        p = str(p)
    ans, failure = _safe_generate(
        "domain",
        p,
        model=gemini_model,
        long_answer=long_answer,
        max_tokens=max_tokens,
    )
    if failure:
        return failure
    verification = verify_poem_quotes(ans or "")
    set_cached(qkey, ans or "")
    return {
        "intent": "domain",
        "answer": ans or "",
        "sources": pack.get("sources", []),   # NEW
        "verification": verification
    }
