# app/ui_chat.py
# -*- coding: utf-8 -*-
"""
Ki·ªÅu Bot ‚Äì Chat UI (RAG + ƒë·ªãnh tuy·∫øn + nh·ªõ ng·ªØ c·∫£nh ng·∫Øn h·∫°n an to√†n)
- Kh√¥ng d√πng value= cho st.chat_input (tr√°nh TypeError tr√™n Streamlit Cloud).
- Sidebar: ch·ªânh k, ch·ªçn model, b·∫≠t/t·∫Øt tr·∫£ l·ªùi d√†i, n√∫t xo√° h·ªôi tho·∫°i.
- Hi·ªÉn th·ªã l·ªãch s·ª≠ d·∫°ng bong b√≥ng, c√≥ ƒë·ªìng h·ªì latency, v√† ngu·ªìn tham kh·∫£o (expander).
- G·ª£i √Ω nhanh b·∫±ng n√∫t (kh√¥ng c·∫ßn prefill chat_input).
- T·ª± ƒë·ªông fallback n·∫øu orchestrator.answer_with_router ch∆∞a h·ªó tr·ª£ history=...
"""

from __future__ import annotations
import os
import time
import streamlit as st

# ====== App setup ======
st.set_page_config(page_title="Ki·ªÅu Bot", page_icon="üìö", layout="centered")

# ====== Import orchestrator an to√†n ======
try:
    from orchestrator import answer_with_router  # ƒëi·ªÅu ph·ªëi theo intent
except Exception as e:
    st.error(f"Kh√¥ng import ƒë∆∞·ª£c orchestrator: {e}")
    st.stop()

# ====== Helpers ======
def ensure_state():
    if "chat" not in st.session_state:
        st.session_state.chat = []  # list[(role, text, meta)]
    if "cfg" not in st.session_state:
        st.session_state.cfg = {
            "k": 4,
            "model": "gemini-2.0-flash",
            "long_answer": False,
        }

def push_msg(role: str, text: str, meta: dict | None = None):
    st.session_state.chat.append((role, text, meta or {}))

def render_message(role: str, text: str):
    avatar = "üßë‚Äçüíª" if role == "user" else "üìö"
    with st.chat_message(role, avatar=avatar):
        st.markdown(text)

def render_sources(sources):
    if not sources:
        return
    # h·ªó tr·ª£ c·∫£ string l·∫´n list
    if isinstance(sources, str):
        src_list = [s.strip() for s in sources.split(";") if s.strip()]
    elif isinstance(sources, list):
        # n·∫øu list l√† contexts (dict), ta g·∫Øng tr√≠ch meta.source
        if sources and isinstance(sources[0], dict):
            tmp = []
            for c in sources:
                src = (c.get("meta") or {}).get("source")
                if src and src not in tmp:
                    tmp.append(src)
            src_list = tmp
        else:
            src_list = [str(s) for s in sources]
    else:
        src_list = []
    if not src_list:
        return

    with st.expander("Ngu·ªìn / tham chi·∫øu"):
        for s in src_list:
            st.markdown(f"- `{s}`")

def render_header():
    st.markdown(
        """
        <div style="text-align:center; margin-bottom: 0.6rem;">
            <h1 style="margin:0;">üìö Ki·ªÅu Bot</h1>
            <p style="color:#666; margin:0.25rem 0 0;">
                H·ªèi‚Äìƒë√°p v·ªÅ <em>Truy·ªán Ki·ªÅu</em> (RAG + tr√≠ch th∆°).
            </p>
        </div>
        """,
        unsafe_allow_html=True,
    )

def render_suggestions():
    st.caption("G·ª£i √Ω nhanh:")
    cols = st.columns(3)
    examples = [
        "Cho t√¥i 10 c√¢u ƒë·∫ßu Truy·ªán Ki·ªÅu",
        "So s√°nh Th√∫y V√¢n v√† Th√∫y Ki·ªÅu",
        "√ù nghƒ©a c√¢u ‚ÄúCh·ªØ t√¢m kia m·ªõi b·∫±ng ba ch·ªØ t√†i‚Äù",
    ]
    fired = None
    for i, (c, s) in enumerate(zip(cols, examples)):
        if c.button(s, key=f"suggest_{i}"):
            fired = s
    return fired

# ====== Main UI ======
ensure_state()

with st.sidebar:
    st.header("Thi·∫øt l·∫≠p")
    st.session_state.cfg["k"] = st.slider("Top-k ng·ªØ c·∫£nh", 3, 6, st.session_state.cfg["k"])
    st.session_state.cfg["model"] = st.selectbox(
        "Gemini model",
        ["gemini-2.0-flash", "gemini-2.0-flash-lite"],
        index=0 if st.session_state.cfg["model"] == "gemini-2.0-flash" else 1,
    )
    st.session_state.cfg["long_answer"] = st.toggle("Tr·∫£ l·ªùi d√†i h∆°n (nh·∫≠p vai lu·∫≠n vƒÉn)", value=st.session_state.cfg["long_answer"])
    if st.button("üóëÔ∏è Xo√° h·ªôi tho·∫°i"):
        st.session_state.chat = []
        st.rerun()

    # c·∫£nh b√°o thi·∫øu API key cho Gemini
    if not os.getenv("GOOGLE_API_KEY"):
        st.warning("Thi·∫øu GOOGLE_API_KEY trong m√¥i tr∆∞·ªùng. H√£y b·ªï sung ƒë·ªÉ sinh c√¢u tr·∫£ l·ªùi.", icon="‚ö†Ô∏è")

render_header()

# Hi·ªÉn th·ªã l·ªãch s·ª≠ h·ªôi tho·∫°i
for role, text, _meta in st.session_state.chat:
    render_message(role, text)

# G·ª£i √Ω nhanh
preset = render_suggestions()

# √î nh·∫≠p (KH√îNG d√πng value= ...)
user_msg = st.chat_input("H·ªèi v·ªÅ Truy·ªán Ki·ªÅu‚Ä¶", key="chat_input")

# N·∫øu b·∫•m g·ª£i √Ω nhanh th√¨ ∆∞u ti√™n d√πng g·ª£i √Ω
if preset and not user_msg:
    user_msg = preset

if user_msg:
    # Hi·ªÉn th·ªã tin ng∆∞·ªùi d√πng
    push_msg("user", user_msg)
    render_message("user", user_msg)

    # L·∫•y history ng·∫Øn h·∫°n (cu·ªëi 12 message ~ 6 l∆∞·ª£t)
    history_pairs = [(r, t) for (r, t, _m) in st.session_state.chat[-12:]]

    # G·ªçi orchestrator
    with st.chat_message("assistant", avatar="üìö"):
        t0 = time.time()
        k = st.session_state.cfg["k"]
        model = st.session_state.cfg["model"]
        long_ans = st.session_state.cfg["long_answer"]

        # ∆Øu ti√™n g·ªçi v·ªõi history; n·∫øu h√†m ch∆∞a h·ªó tr·ª£ -> fallback
        try:
            ret = answer_with_router(
                user_msg,
                k=k,
                gemini_model=model,
                long_answer=long_ans,
                history=history_pairs,  # c√≥ th·ªÉ kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ·ªü phi√™n b·∫£n c≈©
            )
        except TypeError:
            # orchestrator c≈© ch∆∞a c√≥ tham s·ªë 'history'
            ret = answer_with_router(
                user_msg,
                k=k,
                gemini_model=model,
                long_answer=long_ans,
            )
        except Exception as e:
            st.error(f"L·ªói g·ªçi orchestrator: {e}")
            ret = {"answer": "Xin l·ªói, m√¨nh g·∫∑p s·ª± c·ªë khi x·ª≠ l√Ω y√™u c·∫ßu.", "sources": []}

        elapsed = (time.time() - t0) * 1000.0

        ans_text = ret.get("answer") or "Xin l·ªói, m√¨nh ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi ph√π h·ª£p."
        render_message("assistant", ans_text)

        # Ngu·ªìn / contexts
        render_sources(ret.get("sources"))

        # Th√¥ng tin ph·ª• (latency + intent)
        intent = ret.get("intent", "?")
        st.caption(f"‚è±Ô∏è {elapsed:.0f} ms ‚Ä¢ intent: `{intent}`")

    # L∆∞u tr·∫£ l·ªùi
    push_msg("assistant", ans_text, {"intent": ret.get("intent"), "sources": ret.get("sources")})
