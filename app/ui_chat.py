# -*- coding: utf-8 -*-
"""
Chat UI cho Ki·ªÅu Bot (RAG + ƒë·ªãnh tuy·∫øn + nh·ªõ ng·ªØ c·∫£nh ng·∫Øn h·∫°n)
- Poem mode: tr√≠ch NGUY√äN VƒÇN theo s·ªë c√¢u/kho·∫£ng.
- Domain: RAG + Gemini, c√≥ ƒëi·ªÅu khi·ªÉn max_tokens & long_answer.
- ·∫®n ngu·ªìn ƒë·ªÉ nh∆∞·ªùng token cho ph·∫ßn tr·∫£ l·ªùi (theo y√™u c·∫ßu).
"""

import time
import streamlit as st
from orchestrator import answer_with_router  # ƒëi·ªÅu ph·ªëi tr·∫£ l·ªùi theo intent

# ====== C·∫•u h√¨nh trang ======
st.set_page_config(page_title="Ki·ªÅu Bot", page_icon="üìö", layout="centered")

st.markdown(
    "<h1 style='text-align:center;margin-top:0'>üìö Ki·ªÅu Bot</h1>",
    unsafe_allow_html=True
)

# ====== Sidebar: c·∫•u h√¨nh ======
with st.sidebar:
    st.header("Thi·∫øt l·∫≠p")
    k = st.slider("Top-k ng·ªØ c·∫£nh (RAG)", 3, 10, 5)
    model = st.selectbox("Gemini model", ["gemini-2.0-flash", "gemini-2.0-flash-lite"], index=0)
    long_ans = st.toggle("Tr·∫£ l·ªùi theo vƒÉn phong lu·∫≠n", value=False)
    max_tok = st.slider("Gi·ªõi h·∫°n token ƒë·∫ßu ra", 256, 8192, 2048, step=256)

# ====== B·ªô nh·ªõ h·ªôi tho·∫°i ======
if "chat" not in st.session_state:
    st.session_state.chat = []  # list[(role, text)]

# Hi·ªÉn th·ªã l·ªãch s·ª≠ h·ªôi tho·∫°i
for role, text in st.session_state.chat:
    with st.chat_message(role):
        st.markdown(text)

# ====== √î nh·∫≠p ng∆∞·ªùi d√πng ======
user_msg = st.chat_input("H·ªèi v·ªÅ Truy·ªán Ki·ªÅu‚Ä¶", key="chat_input")

if user_msg:
    # hi·ªÉn th·ªã tin ng∆∞·ªùi d√πng
    st.session_state.chat.append(("user", user_msg))
    with st.chat_message("user"):
        st.markdown(user_msg)

    # l·∫•y history ng·∫Øn h·∫°n (cu·ªëi 12 l∆∞·ª£t: 6 c·∫∑p user/assistant)
    history = st.session_state.chat[-12:]

    # g·ªçi router ƒë·ªÉ tr·∫£ l·ªùi ƒë√∫ng nh√°nh
    with st.chat_message("assistant"):
        t0 = time.time()
        ret = answer_with_router(
            user_msg,
            k=k,
            gemini_model=model,
            long_answer=long_ans,
            history=history,
            max_tokens=max_tok,   # <‚Äî truy·ªÅn max_tokens xu·ªëng
        )
        st.markdown(ret["answer"])
        st.caption(f"‚è±Ô∏è {(time.time() - t0) * 1000:.0f} ms")

    # l∆∞u c√¢u tr·∫£ l·ªùi v√†o l·ªãch s·ª≠
    st.session_state.chat.append(("assistant", ret["answer"]))
